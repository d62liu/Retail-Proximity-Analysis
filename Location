import requests
from geopy.distance import geodesic

API_KEY = 'AIzaSyCwOrAmMIIFJW7wgXlo1u8UYwcjw7FYfuk'

def get_store_locations(store_name, location, radius=40000, exclude_keywords=None):
    exclude_keywords = exclude_keywords or []
    url = f"https://maps.googleapis.com/maps/api/place/nearbysearch/json?location={location}&radius={radius}&name={store_name}&key={API_KEY}"
    response = requests.get(url)
    
    if response.status_code == 200:
        results = response.json().get('results', [])
        stores = []
        for place in results:
            name = place.get("name")
            address = place.get('vicinity')
            lat = place['geometry']['location']['lat']
            lng = place['geometry']['location']['lng']
            
            if not any(keyword.lower() in name.lower() for keyword in exclude_keywords):
                stores.append({'name': name, 'address': address, 'lat': lat, 'lng': lng})
        return stores
    else:
        return []

location = "32.458493203719186, -99.51667084996238"
exclude_keywords = ['walmart pharmacy', 'walmart grocery pickup', 'walmart garden centre', 'pharmacy', 'garden']

dollar_general_stores = get_store_locations('Dollar General', location, exclude_keywords=('dollar tree', 'dollarama'))
dollar_tree_stores = get_store_locations('Dollar Tree', location, exclude_keywords=exclude_keywords)
dollarama_stores = get_store_locations('Dollarama', location, exclude_keywords=exclude_keywords)
walmart_sup_stores = get_store_locations('Walmart Supercentre', location, exclude_keywords=exclude_keywords)
walmart_stores = get_store_locations('Walmart', location, exclude_keywords=exclude_keywords)
target_stores = get_store_locations('Target', location, exclude_keywords=exclude_keywords)

print("Dollar General Stores:")
total_dollar_general = len(dollar_general_stores)


print("Dollar Tree Stores:")
total_dollar_tree = len(dollar_tree_stores)


print("Dollarama Stores:")
total_dollarama = len(dollarama_stores)


print("Walmart Stores:")
total_walmart = len(walmart_stores)


print("Walmart Supercentre Stores:")
total_sup_walmart = len(walmart_sup_stores)


print("Target Stores:")
total_target = len(target_stores)

def calculate_distance(coord1, coord2):
    return geodesic(coord1, coord2).kilometers

def find_nearby_stores(base_stores, target_stores, radius=30):
    nearby_stores = 0
    for base_store in base_stores:
        base_coord = (base_store['lat'], base_store['lng'])
        for target_store in target_stores:
            target_coord = (target_store['lat'], target_store['lng'])
            distance = calculate_distance(base_coord, target_coord)
            if distance <= radius:
                nearby_stores += 1
    return nearby_stores

one = 0
two = 0
three = 0
total_nearby = 0
atleast1 = 0
atleast2 = 0
atleast3 = 0

for store in dollar_general_stores:
    count_nearby = (
        find_nearby_stores([store], dollar_tree_stores, radius=1)
        + find_nearby_stores([store], dollarama_stores, radius=1)
        + find_nearby_stores([store], walmart_stores, radius=1)
        + find_nearby_stores([store], walmart_sup_stores, radius=1)  
        + find_nearby_stores([store], target_stores, radius=1)
    )
    print(f"Store Name: {store['name']}, Address: {store['address']}, Latitude: {store['lat']}, Longitude: {store['lng']}, Number of competitors within 1km: {count_nearby}")
    
    if count_nearby >= 1:
        atleast1 += 1
    if count_nearby >= 2:
        atleast2 += 1
    if count_nearby >= 3:
        atleast3 += 1

    total_nearby += count_nearby
    if count_nearby == 1:
        one += 1
    elif count_nearby == 2:
        two += 1
    elif count_nearby == 3:
        three += 1

avg_num_near_general = total_nearby / total_dollar_general if total_dollar_general > 0 else 0
print(f"Dollar General has {avg_num_near_general:.4f} competitor stores within a radius of 1 km. {atleast1 / total_dollar_general:.4f} have at least 1 competitor within 1km, {atleast2 / total_dollar_general:.4f} have at least 2 competitors within 1km, and {atleast3 / total_dollar_general:.4f} have at least 3 competitors.")
