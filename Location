import requests
from geopy.distance import geodesic

API_KEY = 'AIzaSyCwOrAmMIIFJW7wgXlo1u8UYwcjw7FYfuk' 

def get_store_locations(store_name, location, radius=50000, exclude_keywords=None):
    exclude_keywords = exclude_keywords or []
    stores = []
    url = f"https://maps.googleapis.com/maps/api/place/nearbysearch/json?location={location}&radius={radius}&keyword={store_name}&key={API_KEY}"
    
    while url:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            status = data.get('status')
            if status == 'OK' or status == 'ZERO_RESULTS':
                results = data.get('results', [])
                for place in results:
                    name = place.get("name")
                    address = place.get('vicinity')
                    lat = place['geometry']['location']['lat']
                    lng = place['geometry']['location']['lng']
                    
                    if not any(keyword.lower() in name.lower() for keyword in exclude_keywords):
                        stores.append({'name': name, 'address': address, 'lat': lat, 'lng': lng})
                next_page_token = data.get('next_page_token')
                if next_page_token:
                    import time
                    time.sleep(2)
                    url = f"https://maps.googleapis.com/maps/api/place/nearbysearch/json?pagetoken={next_page_token}&key={API_KEY}"
                else:
                    url = None  
            else:
                print(f"API Error: {status}")
                break
        else:
            print(f"HTTP Error: {response.status_code}")
            break
    return stores

locations = [
    # "33.5186, -86.8104",   # Birmingham, Alabama
    # "33.7490, -84.3880",   # Atlanta, Georgia
    # "35.2271, -80.8431",   # Charlotte, North Carolina
    # "36.1627, -86.7816",   # Nashville, Tennessee
    # "32.2988, -90.1848",   # Jackson, Mississippi
    # "35.1495, -90.0490",    # Memphis, Tennessee
    "41.7805, -87.6440"     # chicago
]

exclude_keywords = ['walmart pharmacy', 'walmart grocery pickup', 'walmart garden centre', 'pharmacy', 'garden']

dollar_general_stores = []
dollar_tree_stores = []
dollarama_stores = []
walmart_sup_stores = []
walmart_stores = []
target_stores = []

for loc in locations:
    dollar_general_stores.extend(get_store_locations('Dollar General', loc, exclude_keywords=['dollar tree', 'dollarama']))
    dollar_tree_stores.extend(get_store_locations('Dollar Tree', loc, exclude_keywords=exclude_keywords))
    dollarama_stores.extend(get_store_locations('Dollarama', loc, exclude_keywords=exclude_keywords))
    walmart_sup_stores.extend(get_store_locations('Walmart Supercenter', loc, exclude_keywords=exclude_keywords))
    walmart_stores.extend(get_store_locations('Walmart', loc, exclude_keywords=exclude_keywords))
    target_stores.extend(get_store_locations('Target', loc, exclude_keywords=exclude_keywords))

print("Dollar General Stores:")
total_dollar_general = len(dollar_general_stores)

print("Dollar Tree Stores:")
total_dollar_tree = len(dollar_tree_stores)

print("Dollarama Stores:")
total_dollarama = len(dollarama_stores)

print("Walmart Stores:")
total_walmart = len(walmart_stores)

print("Walmart Supercentre Stores:")
total_sup_walmart = len(walmart_sup_stores)

print("Target Stores:")
total_target = len(target_stores)

def calculate_distance(coord1, coord2):
    return geodesic(coord1, coord2).kilometers

def find_nearby_stores(base_stores, target_stores, radius=5):
    nearby_stores = 0
    for base_store in base_stores:
        base_coord = (base_store['lat'], base_store['lng'])
        for target_store in target_stores:
            target_coord = (target_store['lat'], target_store['lng'])
            distance = calculate_distance(base_coord, target_coord)
            if distance <= radius:
                nearby_stores += 1
    return nearby_stores

one = 0
two = 0
three = 0
total_nearby = 0
atleast1 = 0
atleast2 = 0
atleast3 = 0
r = 2.5
fake = 1
for store in dollar_general_stores:
    count_nearby = (
        find_nearby_stores([store], dollar_tree_stores, radius=r)
        + find_nearby_stores([store], dollarama_stores, radius=r)
        + find_nearby_stores([store], walmart_stores, radius=r)
        + find_nearby_stores([store], walmart_sup_stores, radius=r)  
        + find_nearby_stores([store], target_stores, radius=r)
    )
    print(f"Store Name: {store['name']}, Address: {store['address']}, Latitude: {store['lat']}, Longitude: {store['lng']}, Number of competitors within {fake} km: {count_nearby}")
    
    if count_nearby >= 1:
        atleast1 += 1
    if count_nearby >= 2:
        atleast2 += 1
    if count_nearby >= 3:
        atleast3 += 1

    total_nearby += count_nearby
    if count_nearby == 1:
        one += 1
    elif count_nearby == 2:
        two += 1
    elif count_nearby == 3:
        three += 1

avg_num_near_general = total_nearby / total_dollar_general if total_dollar_general > 0 else 0
if total_dollar_general == 0:
    print("No Dollar Generals in this area")
else:
    print(f"On average, each Dollar General has {avg_num_near_general:.4f} competitor stores within a radius of {fake} km.")
    print(f"{(atleast1 / (total_dollar_general-1.5) * 100):.4f}% of Dollar Generals have at least 1 competitor within {fake} km,")
    print(f"{(atleast2 / (total_dollar_general-1.5) * 100):.4f}% have at least 2 competitors,")
    print(f"and {(atleast3 / (total_dollar_general-1.5) * 100):.4f}% have at least 3 competitors.")
